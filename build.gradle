buildscript {
  ext {
    nexusUrl = findProperty('nexusUrl')
  }
  repositories {
    if (nexusUrl)
      maven { url "${nexusUrl}/repository/maven-public/" }
    else {
      mavenCentral()
      jcenter()
      maven { url "https://plugins.gradle.org/m2/" }
    }
  }
  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${project.'libs.kotlin'}"
    classpath "org.jetbrains.dokka:dokka-gradle-plugin:${project.'libs.dokka'}"
    classpath "org.junit.platform:junit-platform-gradle-plugin:${project.'libs.junitPlatformPlugin'}"
  }
}

apply plugin: 'kotlin'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'org.junit.platform.gradle.plugin'

group = "com.vperi"

ext {
  nexusUrl = findProperty('nexusUrl')
}

repositories {
  if (nexusUrl) {
    maven { url "${nexusUrl}/repository/maven-public/" }
    maven { url 'https://jitpack.io' }
  } else {
    mavenCentral()
    maven { url 'https://jitpack.io' }
  }
}

junitPlatform {
  filters {
    engines {
      include 'spek'
    }
  }
}

dokka {
  includes = ['intro.md']
  outputFormat = 'gfm'
  reportUndocumented = false
  outputDirectory = "$buildDir/gfm"
  packageOptions {
    prefix = "com.vperi.promise.internal"
    suppress = true
  }
  packageOptions {
    prefix = "com.vperi.benchmarks"
    suppress = true
  }
//  externalDocumentationLink {
//    url = new URL("https://kotlin.github.io/kotlinx.coroutines/")
//  }
}


dependencies {
  implementation "org.jetbrains.kotlin:kotlin-stdlib:${project.'libs.kotlin'}"
  implementation "com.google.guava:guava:${project.'libs.guava'}"
  compile 'com.vperi:kotlin-util:1.0.2'
  compile 'com.vperi:kotlin-coroutines-lib:1.0.5'
  //compile project(":kotlin-coroutines-lib")
  compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:${project.'libs.kotlinx'}"
  compile "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:${project.'libs.kotlinx'}"

  testCompile "org.jetbrains.kotlin:kotlin-reflect:${project.'libs.kotlin'}"

  testCompile("org.jetbrains.spek:spek-api:${project.'libs.spek'}") {
    exclude group: 'org.jetbrains.kotlin'
  }
  testRuntime("org.jetbrains.spek:spek-junit-platform-engine:${project.'libs.spek'}") {
    exclude group: 'org.junit.platform'
    exclude group: 'org.jetbrains.kotlin'
  }

  testCompile "junit:junit:${project.'libs.junit4'}"
  testCompile "org.jetbrains.kotlin:kotlin-test-junit:${project.'libs.kotlin'}"
}

task copyDocs(type: Copy, dependsOn: ["dokka"]) {
  from "$buildDir/gfm/kotlin-deferred-then"
  into "$projectDir/docs"
  rename 'index.md', 'readme.md'

}

task docs(dependsOn: ["copyDocs"])

clean.doLast {
  file("$projectDir/docs").deleteDir()
}

kotlin {
  experimental {
    coroutines "enable"
  }
}

tasks.withType(Test) {
  testLogging {
    showStandardStreams = true
//    events "passed", "failed"
  }
}

